//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Recomedia_de.Logic.VisuWeb {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Recomedia_de.Logic.VisuWeb.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die before character  ähnelt.
        /// </summary>
        internal static string BeforeChar {
            get {
                return ResourceManager.GetString("BeforeChar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Binary ähnelt.
        /// </summary>
        internal static string BinaryInput {
            get {
                return ResourceManager.GetString("BinaryInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is empty. Placeholders must at least specify a (previously defined) {&lt;name&gt;} or a valid type letter prefixed with a colon {:&lt;T&gt;}. ähnelt.
        /// </summary>
        internal static string EmptyPlaceholder {
            get {
                return ResourceManager.GetString("EmptyPlaceholder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is empty. It should contain a valid C# expression. ähnelt.
        /// </summary>
        internal static string EmptyTemplateCsharp {
            get {
                return ResourceManager.GetString("EmptyTemplateCsharp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is empty. It should contain a valid combination of text and placeholders. ähnelt.
        /// </summary>
        internal static string EmptyTemplateText {
            get {
                return ResourceManager.GetString("EmptyTemplateText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains a misformed range for a text representation. Ranges consist of optional numbers with .. in between. Numbers must use comma as the decimal separator, and cannot contain group (thousands) separators. Prefix range boundaries with &gt; (for lower boundaries), or &lt; (upper boundaries), to indicate that the respective value itself should be treated as out of the range. ähnelt.
        /// </summary>
        internal static string ExplicitMappingInvalidRange {
            get {
                return ResourceManager.GetString("ExplicitMappingInvalidRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains a misformed number for a text representation. Numbers use comma as the decimal separator (if needed), and cannot contain group (thousands) separators. ähnelt.
        /// </summary>
        internal static string ExplicitMappingInvalidValue {
            get {
                return ResourceManager.GetString("ExplicitMappingInvalidValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains a text representation with a value range where the upper bound is no larger than the lower bound. ähnelt.
        /// </summary>
        internal static string ExplicitMappingInvertedRange {
            get {
                return ResourceManager.GetString("ExplicitMappingInvertedRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains a misformed range boundary (number) for a text representation. Numbers must use comma as the decimal separator, and cannot contain group (thousands) separators. Prefix range boundaries with &gt; (for lower boundaries), or &lt; (upper boundaries), to indicate that the respective value itself should be treated as out of the range. ähnelt.
        /// </summary>
        internal static string ExplicitMappingInvRngVal {
            get {
                return ResourceManager.GetString("ExplicitMappingInvRngVal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Expression ähnelt.
        /// </summary>
        internal static string Expression {
            get {
                return ResourceManager.GetString("Expression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Number of Outputs and Expressions ähnelt.
        /// </summary>
        internal static string ExpressionCount {
            get {
                return ResourceManager.GetString("ExpressionCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die First matching item as number ähnelt.
        /// </summary>
        internal static string FirstAsNumber {
            get {
                return ResourceManager.GetString("FirstAsNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scaling factor ähnelt.
        /// </summary>
        internal static string FirstAsNumberParam {
            get {
                return ResourceManager.GetString("FirstAsNumberParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die First matching item as text ähnelt.
        /// </summary>
        internal static string FirstAsText {
            get {
                return ResourceManager.GetString("FirstAsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text prefix ähnelt.
        /// </summary>
        internal static string FirstAsTextParam {
            get {
                return ResourceManager.GetString("FirstAsTextParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains an assignment. This is generally not allowable in expressions. ähnelt.
        /// </summary>
        internal static string HasAssignment {
            get {
                return ResourceManager.GetString("HasAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  uses a default name, which is not allowable in this context. Specify an explicit name before the :. ähnelt.
        /// </summary>
        internal static string HasDefaultName {
            get {
                return ResourceManager.GetString("HasDefaultName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains a format specification or text mappings, which is not allowable in this context. Specify only a valid type letter. ähnelt.
        /// </summary>
        internal static string HasFormatOrMappings {
            get {
                return ResourceManager.GetString("HasFormatOrMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains a reference to an output that either doesn&apos;t exist or cannot be used here. Current output values (_out..._) can only be used from expressions with lower numbers than the referencing expression. ähnelt.
        /// </summary>
        internal static string HasOutOfRangeRef {
            get {
                return ResourceManager.GetString("HasOutOfRangeRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  has a name that uses special characters, which is not allowable in this context. Specify a name starting with a letter and using only letters, digits, and _. ähnelt.
        /// </summary>
        internal static string HasUnusableName {
            get {
                return ResourceManager.GetString("HasUnusableName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Integer ähnelt.
        /// </summary>
        internal static string IntegerInput {
            get {
                return ResourceManager.GetString("IntegerInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is not a valid scaling factor. Scaling factors must use full stop (.) or comma (,) as the decimal separator and cannot use group (thousands) separators. ähnelt.
        /// </summary>
        internal static string InvalidScaling {
            get {
                return ResourceManager.GetString("InvalidScaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains an empty text representation. This is only allowed when a value is explicitly given, but not for implicit values.  ähnelt.
        /// </summary>
        internal static string MappingEmptyImplicitValue {
            get {
                return ResourceManager.GetString("MappingEmptyImplicitValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains a mix of implicit and explicit values for text representations. This generally not allowable. Integer text representations can either exclusively use implicit values or value ranges, or exclusively use explicit values or value ranges. Floating point numer representations can only  use explicit values or value ranges. ähnelt.
        /// </summary>
        internal static string MappingNoExplicitValues {
            get {
                return ResourceManager.GetString("MappingNoExplicitValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  uses implicit values for text replacements. String placeholders generally can&apos;t use implicit replacement values. Use assignments with an equals sign (=) instead. ähnelt.
        /// </summary>
        internal static string MappingNoImplicitTextValues {
            get {
                return ResourceManager.GetString("MappingNoImplicitTextValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  uses implicit values for text representations. Floating point number representations generally can&apos;t use implicit values. Integer representations don&apos;t support mixing implicit and explicit values. ähnelt.
        /// </summary>
        internal static string MappingNoImplicitValues {
            get {
                return ResourceManager.GetString("MappingNoImplicitValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains an empty orignal text for a text replacement. The original text must be one character or longer. ähnelt.
        /// </summary>
        internal static string MappingNoOriginalTextValue {
            get {
                return ResourceManager.GetString("MappingNoOriginalTextValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains an invalid assignment for a text representation. Valid assignments contain exactly one equals sign (=) between value or range (left hand side) and the text (right hand side).  ähnelt.
        /// </summary>
        internal static string MappingWrongAssignment {
            get {
                return ResourceManager.GetString("MappingWrongAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains an invalid assignment for a text replacement. Valid assignments contain exactly one equals sign (=) between the original text (left hand side) and the replacement text (right hand side). ähnelt.
        /// </summary>
        internal static string MappingWrongTextAssignment {
            get {
                return ResourceManager.GetString("MappingWrongTextAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sum of matching items as numbers ähnelt.
        /// </summary>
        internal static string MultiAddNumbers {
            get {
                return ResourceManager.GetString("MultiAddNumbers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scaling factor ähnelt.
        /// </summary>
        internal static string MultiAddNumbersParam {
            get {
                return ResourceManager.GetString("MultiAddNumbersParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Concatenate matching items as text ähnelt.
        /// </summary>
        internal static string MultiConcatTexts {
            get {
                return ResourceManager.GetString("MultiConcatTexts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text separator ähnelt.
        /// </summary>
        internal static string MultiConcatTextsParam {
            get {
                return ResourceManager.GetString("MultiConcatTextsParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Maximum number of matching items ähnelt.
        /// </summary>
        internal static string MultiMaxNumber {
            get {
                return ResourceManager.GetString("MultiMaxNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scaling factor ähnelt.
        /// </summary>
        internal static string MultiMaxNumberParam {
            get {
                return ResourceManager.GetString("MultiMaxNumberParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Minimum number of matching items ähnelt.
        /// </summary>
        internal static string MultiMinNumber {
            get {
                return ResourceManager.GetString("MultiMinNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scaling factor ähnelt.
        /// </summary>
        internal static string MultiMinNumberParam {
            get {
                return ResourceManager.GetString("MultiMinNumberParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains no placeholders. Enclose placeholders in {}. ähnelt.
        /// </summary>
        internal static string NoPlaceholder {
            get {
                return ResourceManager.GetString("NoPlaceholder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  was not found in input text. ähnelt.
        /// </summary>
        internal static string NotFound {
            get {
                return ResourceManager.GetString("NotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die cannot converted to a number. ähnelt.
        /// </summary>
        internal static string NoXmlDouble {
            get {
                return ResourceManager.GetString("NoXmlDouble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Number ähnelt.
        /// </summary>
        internal static string NumberInput {
            get {
                return ResourceManager.GetString("NumberInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The text ähnelt.
        /// </summary>
        internal static string NumErrPrefix {
            get {
                return ResourceManager.GetString("NumErrPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output ähnelt.
        /// </summary>
        internal static string Output {
            get {
                return ResourceManager.GetString("Output", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Number of Paths and  Outputs ähnelt.
        /// </summary>
        internal static string OutputCount {
            get {
                return ResourceManager.GetString("OutputCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output Type ähnelt.
        /// </summary>
        internal static string OutType {
            get {
                return ResourceManager.GetString("OutType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Path ähnelt.
        /// </summary>
        internal static string Path {
            get {
                return ResourceManager.GetString("Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains a text representation with an explicit value assignment. This is generally not supported for binary values. Use implicit values for text representations in {:B} placeholders. ähnelt.
        /// </summary>
        internal static string PlaceholderBinInvalidAssign {
            get {
                return ResourceManager.GetString("PlaceholderBinInvalidAssign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is misformed. Binary (boolean) placeholders take either no parameters ({:B}), two character parameters ({:Bxy}), or a list of two string parameters ({B|false|true}). ähnelt.
        /// </summary>
        internal static string PlaceholderBinLengthInvalid {
            get {
                return ResourceManager.GetString("PlaceholderBinLengthInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  has the same text representation for false and true values. Text representations must be different (and only one of them can be empty). ähnelt.
        /// </summary>
        internal static string PlaceholderBinSameText {
            get {
                return ResourceManager.GetString("PlaceholderBinSameText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is misformed. Integer placeholders ({:I}) support no precision parameter. Optionally, values or value ranges can be specified with text representations (like in [:I|0=null|..&lt;0=negative|&gt;0..=positive}). ähnelt.
        /// </summary>
        internal static string PlaceholderIntLengthInvalid {
            get {
                return ResourceManager.GetString("PlaceholderIntLengthInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is misformed. A placeholder can contain no more than one colon (:), which separates the input name (left hand side) from type and formatting information (right hand side). ähnelt.
        /// </summary>
        internal static string PlaceholderMultipleColon {
            get {
                return ResourceManager.GetString("PlaceholderMultipleColon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains an invalid input name. Valid names start with a letter and can continue with letters, digits, blanks (not at the end) or most special characters. Colons (:) or curly brackets ({ and }) cannot be used. ähnelt.
        /// </summary>
        internal static string PlaceholderNameInvalid {
            get {
                return ResourceManager.GetString("PlaceholderNameInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is an invalid reference. The input name has not been defined before. A type must be given with the input name upon first use. Type characters must be specified with a prefixed colon. ähnelt.
        /// </summary>
        internal static string PlaceholderNameNotFound {
            get {
                return ResourceManager.GetString("PlaceholderNameNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is misformed. Number placeholders take either no parameters ({:N}), or a one-digit precision parameter ({N1}) after their type letter. Values or value ranges can optionally be specified with text representations (like in {:N|..&lt;0=underflow|&gt;1000..=overflow}). ähnelt.
        /// </summary>
        internal static string PlaceholderNumFormatInvalid {
            get {
                return ResourceManager.GetString("PlaceholderNumFormatInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  refers to a previously defined input name, but specifies a different type. A reference can only redefine the formatting, but not the type, of the used input. ähnelt.
        /// </summary>
        internal static string PlaceholderReuseWrongType {
            get {
                return ResourceManager.GetString("PlaceholderReuseWrongType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is misformed. The string ({:S}) placeholder does not support any parameters. ähnelt.
        /// </summary>
        internal static string PlaceholderStrLengthInvalid {
            get {
                return ResourceManager.GetString("PlaceholderStrLengthInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is an unknown placeholder type.  Only the following type characters can be used (as upper or lower case): B → Binary (boolean); I → Integer; F, N, G, P → Floating point number (double) specifying different formats; S → Text (string). ähnelt.
        /// </summary>
        internal static string PlaceholderTypeInvalid {
            get {
                return ResourceManager.GetString("PlaceholderTypeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die : The result of the expression calculation is not a number or out of range. The output remains unchanged. ähnelt.
        /// </summary>
        internal static string ResultNanOrOor {
            get {
                return ResourceManager.GetString("ResultNanOrOor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Runtime Error ähnelt.
        /// </summary>
        internal static string RuntimeError {
            get {
                return ResourceManager.GetString("RuntimeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input coding ähnelt.
        /// </summary>
        internal static string SelectCode {
            get {
                return ResourceManager.GetString("SelectCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type of selection ähnelt.
        /// </summary>
        internal static string SelectOperation {
            get {
                return ResourceManager.GetString("SelectOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Decimal Separator ähnelt.
        /// </summary>
        internal static string SeparatorDecimal {
            get {
                return ResourceManager.GetString("SeparatorDecimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The decimal separator cannot be longer than one character. ähnelt.
        /// </summary>
        internal static string SeparatorDecimalTooLong {
            get {
                return ResourceManager.GetString("SeparatorDecimalTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The decimal separator cannot be empty. ähnelt.
        /// </summary>
        internal static string SeparatorDecimalTooShort {
            get {
                return ResourceManager.GetString("SeparatorDecimalTooShort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Group (Thousands) Separator ähnelt.
        /// </summary>
        internal static string SeparatorGroup {
            get {
                return ResourceManager.GetString("SeparatorGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The group separator cannot be longer than one character. ähnelt.
        /// </summary>
        internal static string SeparatorGroupTooLong {
            get {
                return ResourceManager.GetString("SeparatorGroupTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Group and decimal separator cannot be the same. ähnelt.
        /// </summary>
        internal static string SeparatorsIdentical {
            get {
                return ResourceManager.GetString("SeparatorsIdentical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text ähnelt.
        /// </summary>
        internal static string StringInput {
            get {
                return ResourceManager.GetString("StringInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Syntax error ähnelt.
        /// </summary>
        internal static string SyntaxError {
            get {
                return ResourceManager.GetString("SyntaxError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Format Template ähnelt.
        /// </summary>
        internal static string Template {
            get {
                return ResourceManager.GetString("Template", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Number of Outputs and Templates ähnelt.
        /// </summary>
        internal static string TemplateCount {
            get {
                return ResourceManager.GetString("TemplateCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains too many binary ({:B}) placeholders. ähnelt.
        /// </summary>
        internal static string TooManyBinPlaceholders {
            get {
                return ResourceManager.GetString("TooManyBinPlaceholders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains too many integer ({:I}) placeholders. ähnelt.
        /// </summary>
        internal static string TooManyIntPlaceholders {
            get {
                return ResourceManager.GetString("TooManyIntPlaceholders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains too many floating point number (({:F}, {:N}, {:G} and/or {:P}) placeholders. ähnelt.
        /// </summary>
        internal static string TooManyNumPlaceholders {
            get {
                return ResourceManager.GetString("TooManyNumPlaceholders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains too many placeholders. ähnelt.
        /// </summary>
        internal static string TooManyPlaceholders {
            get {
                return ResourceManager.GetString("TooManyPlaceholders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  contains too many string ({:S}) placeholders. ähnelt.
        /// </summary>
        internal static string TooManyStrPlaceholders {
            get {
                return ResourceManager.GetString("TooManyStrPlaceholders", resourceCulture);
            }
        }
    }
}
